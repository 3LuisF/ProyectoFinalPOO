/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.proyectofinalpoo;

import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import javax.swing.JOptionPane;

/**
 *
 * @author Luis F Montoya
 */
public class Eliminar extends javax.swing.JFrame {

    /**
     * Creates new form Eliminar
     */
    public Eliminar() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblNombre = new javax.swing.JLabel();
        btnBorrar = new javax.swing.JButton();
        btnRegresarBorrar = new javax.swing.JButton();
        txtBorrarNombre = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblNombre.setText("Nombre");

        btnBorrar.setText("Borrar");
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });

        btnRegresarBorrar.setText("Regresar");
        btnRegresarBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarBorrarActionPerformed(evt);
            }
        });

        txtBorrarNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBorrarNombreActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(lblNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtBorrarNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(btnBorrar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRegresarBorrar)))
                .addContainerGap(41, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNombre)
                    .addComponent(txtBorrarNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBorrar)
                    .addComponent(btnRegresarBorrar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtBorrarNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBorrarNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBorrarNombreActionPerformed

    private void btnRegresarBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarBorrarActionPerformed
        // TODO add your handling code here:
        Principal variable = new Principal();
        variable.setVisible(true);
        variable.setLocationRelativeTo(null);
        dispose();
    }//GEN-LAST:event_btnRegresarBorrarActionPerformed

    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarActionPerformed
        // TODO add your handling code here:
        try {

            // Obtener el nombre del contacto a borrar
            // desde el argumento de la línea de comandos
            String nombreBorrar = txtBorrarNombre.getText();

            String cadenaNombreNumero;
            String nombre;
            int index;

            // Utilizando un puntero de archivo para crear el archivo.
            File archivo = new File("C:\\Users\\Usuario\\IdeaProjects\\ProyectoFinalPOO\\src\\contactoAmigos.txt");

            if (!archivo.exists()) {
                // Crear un nuevo archivo si no existe.
                archivo.createNewFile();
            }

            // Abrir el archivo en modo de lectura y escritura.
            RandomAccessFile raf = new RandomAccessFile(archivo, "rw");
            boolean encontrado = false;

            // Verificar si el nombre del contacto existe.
            while (raf.getFilePointer() < raf.length()) {
                // Leer una línea del archivo.
                cadenaNombreNumero = raf.readLine();

                // Dividir la cadena para obtener el nombre y número.
                String[] lineSplit = cadenaNombreNumero.split("!");

                // Separar el nombre y número.
                nombre = lineSplit[0];

                // Si se encuentra el nombre del contacto, marcar como encontrado y salir del bucle.
                if (nombre.equals(nombreBorrar)) {
                    encontrado = true;
                    break;
                }
            }

            // Borrar el contacto si se encontró.
            if (encontrado) {

                // Crear un archivo temporal.
                File tmpFile = new File("temp.txt");

                // Abrir el archivo temporal en modo de lectura y escritura.
                RandomAccessFile tmpraf = new RandomAccessFile(tmpFile, "rw");

                // Colocar el puntero del archivo al inicio.
                raf.seek(0);

                // Recorrer el archivo original.
                while (raf.getFilePointer() < raf.length()) {
                    // Leer el contacto del archivo.
                    cadenaNombreNumero = raf.readLine();

                    index = cadenaNombreNumero.indexOf('!');
                    nombre = cadenaNombreNumero.substring(0, index);

                    // Si se encuentra el contacto a borrar, omitirlo y no agregarlo al archivo temporal.
                    if (nombre.equals(nombreBorrar)) {
                        continue;
                    }

                    // Agregar este contacto en el archivo temporal.
                    tmpraf.writeBytes(cadenaNombreNumero);

                    // Agregar el separador de línea en el archivo temporal.
                    tmpraf.writeBytes(System.lineSeparator());
                }

                // El contacto ha sido eliminado.
                // Copiar el contenido actualizado del archivo temporal al archivo original.

                // Colocar el puntero de ambos archivos al inicio.
                raf.seek(0);
                tmpraf.seek(0);

                // Copiar el contenido del archivo temporal al archivo original.
                while (tmpraf.getFilePointer() < tmpraf.length()) {
                    raf.writeBytes(tmpraf.readLine());
                    raf.writeBytes(System.lineSeparator());
                }

                // Establecer la longitud del archivo original a la del archivo temporal.
                raf.setLength(tmpraf.length());

                // Cerrar los recursos.
                tmpraf.close();
                raf.close();

                // Eliminar el archivo temporal.
                tmpFile.delete();

                JOptionPane.showMessageDialog(null,"Contacto eliminado.");
            } else {
                // El contacto a borrar no se encontró.
                // Cerrar el archivo y mostrar el mensaje de error.
                raf.close();
                JOptionPane.showMessageDialog(null,"El nombre especificado no existe.");
            }
        } catch (IOException ioe) {
            System.out.println(ioe);
        } catch (ArrayIndexOutOfBoundsException aioobe) {
            System.out.println("Debes proporcionar el nombre del contacto a borrar como argumento.");
        }
    }//GEN-LAST:event_btnBorrarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Eliminar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Eliminar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Eliminar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Eliminar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Eliminar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBorrar;
    private javax.swing.JButton btnRegresarBorrar;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JTextField txtBorrarNombre;
    // End of variables declaration//GEN-END:variables
}
